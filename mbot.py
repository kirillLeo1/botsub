import logging
import mysql.connector
import os
from dotenv import load_dotenv
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InputMediaPhoto
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ConversationHandler,
    ContextTypes
)

# ============================================
#            –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞ —ñ –ë–î
# ============================================

ADMIN_IDS = [7060952414]
GROUP_USERNAME = '@Rabota_Kiev_hub'

INLINE_BACK = InlineKeyboardMarkup(
    [[InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_main')]]
)

(
    MAIN_MENU,
    SELECT_ROLE,
    NAME_PHONE,
    EXPERIENCE,
    SKILLS,
    ASK_PHOTO,
    ADD_SUB,
    REMOVE_SUB,
    VIEW_CAT,
    VIEW_NAV,
    CONFIRM_REMOVE
) = range(11)

load_dotenv()                        

conn = mysql.connector.connect(
    host=os.environ["MYSQLHOST"],
    port=int(os.environ["MYSQLPORT"]),
    user=os.environ["MYSQLUSER"],
    password=os.environ["MYSQLPASSWORD"],
    database=os.environ["MYSQLDATABASE"],
    ssl_disabled=False                
)
cursor = conn.cursor()

cursor.execute('''
    CREATE TABLE IF NOT EXISTS resumes (
        id INT AUTO_INCREMENT PRIMARY KEY,
        user_id BIGINT,
        role VARCHAR(255),
        name_phone VARCHAR(255),
        experience TEXT,
        skills TEXT,
        photo_file_id VARCHAR(255)
    );
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS subscribers (
        user_id BIGINT PRIMARY KEY
    );
''')
conn.commit()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

ROLE_IDS = [
    'prod',      # 1. –ü—Ä–æ–¥–∞–∂—ñ
    'horeca',    # 2. HoReCa
    'smm',       # 3. –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ / SMM  ‚Üê –≤–æ—Ç –æ–Ω–æ!
    'it',        # 4. –Ü–¢ / –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó
    'office',
    'realty',
    'construct',
    'beauty',
    'logistics',
    'freelance'
]
ROLE_LABELS = {
    'prod': '–ü—Ä–æ–¥–∞–∂—ñ, –¢–æ—Ä–≥—ñ–≤–ª—è, –ü—Ä–æ–¥–∞–≤–µ—Ü—å üíº',
    'horeca': 'HoReCa (–∫–∞—Ñ–µ, —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∏) üçΩÔ∏è',
    'smm': ' –ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥ / SMM üì≤',
    'it': '–Ü–¢ / –¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó üíª',
    'office': '–û—Ñ—ñ—Å-–º–µ–Ω–µ–¥–∂–µ—Ä, –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä, –ê—Å–∏—Å—Ç–µ–Ω—Ç üè¢',
    'realty': '–†—ñ—î–ª—Ç–æ—Ä / –ù–µ—Ä—É—Ö–æ–º—ñ—Å—Ç—å üóùÔ∏è',
    'construct': '–ë—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ / –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞-–î–∏–∑–∞–π–Ω üè°',
    'beauty': '–ö—Ä–∞—Å–∞ / –ó–¥–æ—Ä–æ–≤ º—è üíÜ‚Äç‚ôÄÔ∏è',
    'logistics': '–õ–æ–≥—ñ—Å—Ç–∏–∫–∞ / –°–∫–ª–∞–¥ üöö',
    'freelance': '–§—Ä–∏–ª–∞–Ω—Å / –í—ñ–¥–¥–∞–ª–µ–Ω–∞ —Ä–æ–±–æ—Ç–∞ üåç'
}


def is_subscriber(user_id: int) -> bool:
    cursor.execute('SELECT 1 FROM subscribers WHERE user_id=%s', (user_id,))
    return bool(cursor.fetchone())


def get_main_menu(user_id: int):
    if user_id in ADMIN_IDS:
        return InlineKeyboardMarkup([
            [InlineKeyboardButton('üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—é–º–µ', callback_data='view_resumes')],
            [InlineKeyboardButton('‚ûï –î–æ–¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞', callback_data='btn_add_sub')],
            [InlineKeyboardButton('‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞', callback_data='btn_remove_sub')]
        ])
    elif is_subscriber(user_id):
        return InlineKeyboardMarkup([
            [InlineKeyboardButton('üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–µ–∑—é–º–µ', callback_data='view_resumes')]
        ])
    return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id

    try:
        member = await context.bot.get_chat_member(GROUP_USERNAME, user_id)
        if member.status in ('left', 'kicked'):
            await update.message.reply_text(
                'üö´ –°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à–∏—Å—å –Ω–∞ –≥—Ä—É–ø—É, –ø–æ—Ç—ñ–º –∑–∞–ø—É—Å–∫–∞–π! https://t.me/Rabota_Kiev_hub',
                reply_markup=INLINE_BACK
            )
            return ConversationHandler.END
    except Exception as e:
        logger.warning(f'–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—ñ–¥–ø–∏—Å–∫–∏: {e}')
        await update.message.reply_text(
            '‚ö†Ô∏è –ù–µ –º–æ–∂—É –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É. –ú–æ–∂–ª–∏–≤–æ, –±–æ—Ç –Ω–µ –≤ –≥—Ä—É–ø—ñ –∞–±–æ –Ω–µ –º–∞—î –ø—Ä–∞–≤.',
            reply_markup=INLINE_BACK
        )
        return ConversationHandler.END

    menu = get_main_menu(user_id)
    if menu:
        await update.message.reply_text('–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', reply_markup=menu)
        return MAIN_MENU

    keyboard = [
        [InlineKeyboardButton(ROLE_LABELS[rid], callback_data=f'role_{rid}')]
        for rid in ROLE_IDS
    ]
    keyboard.append([InlineKeyboardButton('üîô –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='back_main')])
    await update.message.reply_photo(
        photo='https://i.imgur.com/MnFdRwx.png',
        caption='–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –∑–≤\'—è–∑–∫—É:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_ROLE


async def select_role(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    rid = query.data.replace('role_', '')
    if rid not in ROLE_LABELS:
        await query.edit_message_text('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫.', reply_markup=INLINE_BACK)
        return SELECT_ROLE

    context.user_data['role'] = ROLE_LABELS[rid]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=(
            f"–í–∏ –æ–±—Ä–∞–ª–∏: <b>{ROLE_LABELS[rid]}</b>\n"
            "–í–≤–µ–¥—ñ—Ç—å —ñ–º º—è, —Ç–µ–ª–µ—Ñ–æ–Ω —ñ @username:\n"
            "–ü—Ä–∏–∫–ª–∞–¥:\n"
            "–ú–∏–∫–æ–ª–∞ –ú–∏–∫–æ–ª–∞–π–æ–≤–∏—á, +380XXXXXXXXX, @username"
        ),
        parse_mode='HTML'
    )
    return NAME_PHONE


async def name_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['name_phone'] = update.message.text
    await update.message.reply_text(
        'üìã –í–≤–µ–¥—ñ—Ç—å –¥–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –∞–±–æ –ø—Ä–æ–π–¥–µ–Ω—ñ –∫—É—Ä—Å–∏:',
        reply_markup=INLINE_BACK
    )
    return EXPERIENCE


async def experience(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['experience'] = update.message.text
    await update.message.reply_text(
        'üí° –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ –Ω–∞–≤–∏—á–∫–∏ (3-5 –ø—É–Ω–∫—Ç—ñ–≤), —Ä–æ–∑–¥—ñ–ª—è—é—á–∏ –∫–æ–º–∞–º–∏:',
        reply_markup=INLINE_BACK
    )
    return SKILLS


async def skills(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['skills'] = update.message.text
    await update.message.reply_text(
        'üì∑ –ü—Ä–∏–∫—Ä—ñ–ø—ñ—Ç—å –≤–∞—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é:',
        reply_markup=INLINE_BACK
    )
    return ASK_PHOTO


async def photo_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    photo = update.message.photo[-1]
    file_id = photo.file_id
    data = context.user_data

    cursor.execute(
        'INSERT INTO resumes (user_id, role, name_phone, experience, skills, photo_file_id) VALUES (%s, %s, %s, %s, %s, %s)',
        (
            update.effective_user.id,
            data['role'],
            data['name_phone'],
            data['experience'],
            data['skills'],
            file_id
        )
    )
    conn.commit()

    await update.message.reply_text(
        '‚úÖ –î—è–∫—É—é, –≤–∞—à–µ —Ä–µ–∑—é–º–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞ —Ä–æ–∑–≥–ª—è–¥.',
        reply_markup=get_main_menu(update.effective_user.id)
    )
    return MAIN_MENU

async def view_resumes_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    buttons = [
        [InlineKeyboardButton(ROLE_LABELS[rid], callback_data=f'view_{rid}')]
        for rid in ROLE_IDS
    ]
    buttons.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_main')])
    await query.edit_message_text('–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —Ä–µ–∑—é–º–µ:', reply_markup=InlineKeyboardMarkup(buttons))
    return VIEW_CAT


async def handle_view_direction(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    rid = query.data.replace('view_', '')
    category = ROLE_LABELS.get(rid)

    cursor.execute(
        'SELECT name_phone, experience, skills, photo_file_id FROM resumes WHERE role=%s ORDER BY id',
        (category,)
    )
    rows = cursor.fetchall()
    if not rows:
        await query.edit_message_text(
            'üìÇ –£ —Ü—å–æ–º—É —Ä–æ–∑–¥—ñ–ª—ñ —â–µ –Ω–µ–º–∞—î —Ä–µ–∑—é–º–µ.',
            reply_markup=get_main_menu(query.from_user.id)
        )
        return MAIN_MENU

    context.user_data['view_list'] = rows
    context.user_data['view_index'] = 0
    return await view_nav(update, context)


async def view_nav(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    rows = context.user_data['view_list']
    idx = context.user_data['view_index']
    idx = max(0, min(idx, len(rows) - 1))
    context.user_data['view_index'] = idx

    name, exp, skills, photo_id = rows[idx]
    caption = f"–†–µ–∑—é–º–µ ({idx + 1}/{len(rows)}):\n{name}\n–î–æ—Å–≤—ñ–¥: {exp}\n–ù–∞–≤–∏—á–∫–∏: {skills}"

    nav_buttons = []
    if idx > 0:
        nav_buttons.append(InlineKeyboardButton('‚Üê –ü–æ–ø–µ—Ä–µ–¥–Ω—î', callback_data='prev_resume'))
    if idx < len(rows) - 1:
        nav_buttons.append(InlineKeyboardButton('–ù–∞—Å—Ç—É–ø–Ω–µ ‚Üí', callback_data='next_resume'))
    nav_buttons.append(InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_main'))

    await query.edit_message_media(
        media=InputMediaPhoto(media=photo_id, caption=caption),
        reply_markup=InlineKeyboardMarkup([nav_buttons])
    )
    return VIEW_NAV


async def next_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['view_index'] += 1
    return await view_nav(update, context)


async def prev_resume(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['view_index'] -= 1
    return await view_nav(update, context)


async def add_subscriber_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        '–í–≤–µ–¥—ñ—Ç—å ID –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–Ω–∏–∫–∞:',
        reply_markup=INLINE_BACK
    )
    return ADD_SUB


async def add_subscriber_save(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = update.message.text.strip()
    try:
        uid = int(text)
        cursor.execute('INSERT IGNORE INTO subscribers(user_id) VALUES (%s)', (uid,))
        conn.commit()
        await update.message.reply_text(
            f'‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –¥–æ–¥–∞–Ω–∏–π.',
            reply_markup=get_main_menu(update.effective_user.id)
        )
    except ValueError:
        await update.message.reply_text(
            '‚ùå –ü–æ–º–∏–ª–∫–∞: –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–∏–π ID.',
            reply_markup=get_main_menu(update.effective_user.id)
        )
    return MAIN_MENU


async def remove_subscriber_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    cursor.execute('SELECT user_id FROM subscribers')
    subs = cursor.fetchall()
    if not subs:
        await query.edit_message_text(
            '–°–ø–∏—Å–æ–∫ –ø—ñ–¥–ø–∏—Å–Ω–∏–∫—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.',
            reply_markup=get_main_menu(query.from_user.id)
        )
        return MAIN_MENU
    buttons = [[InlineKeyboardButton(str(u[0]), callback_data=f'remove_{u[0]}')] for u in subs]
    buttons.append([InlineKeyboardButton('üîô –ù–∞–∑–∞–¥', callback_data='back_main')])
    await query.edit_message_text(
        '–û–±–µ—Ä—ñ—Ç—å ID –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:',
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return REMOVE_SUB


async def remove_subscriber_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    uid = int(query.data.replace('remove_', ''))
    context.user_data['remove_uid'] = uid
    buttons = [
        [InlineKeyboardButton('–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏', callback_data='confirm_remove')],
        [InlineKeyboardButton('üîô –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='back_main')]
    ]
    await query.edit_message_text(
        f'–í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {uid}?',
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return CONFIRM_REMOVE


async def confirm_remove(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    uid = context.user_data.get('remove_uid')
    cursor.execute('DELETE FROM subscribers WHERE user_id=%s', (uid,))
    conn.commit()
    await query.edit_message_text(
        f'‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {uid} –≤–∏–ª—É—á–µ–Ω–∏–π.',
        reply_markup=get_main_menu(query.from_user.id)
    )
    return MAIN_MENU


async def back_main(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    try:
        await query.message.delete()
    except:
        pass
    menu = get_main_menu(user_id)
    if menu:
        await context.bot.send_message(chat_id=chat_id, text='–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:', reply_markup=menu)
        return MAIN_MENU
    keyboard = [[InlineKeyboardButton(ROLE_LABELS[rid], callback_data=f'role_{rid}')] for rid in ROLE_IDS]
    keyboard.append([InlineKeyboardButton('üîô –°–∫–∞—Å—É–≤–∞—Ç–∏', callback_data='back_main')])
    await context.bot.send_photo(
        chat_id=chat_id,
        photo='https://i.imgur.com/MnFdRwx.png',
        caption='–ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ä–µ–∑—é–º–µ –¥–ª—è –∑–≤\'—è–∑–∫—É:',
        reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return SELECT_ROLE


# === MAIN ===
load_dotenv()
def main():
    application = (
        Application.builder()
        .token(os.getenv("BOT_TOKEN")) 
        .build()
    )
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(view_resumes_start, pattern='^view_resumes$'),
                CallbackQueryHandler(add_subscriber_start, pattern='^btn_add_sub$'),
                CallbackQueryHandler(remove_subscriber_start, pattern='^btn_remove_sub$'),
            ],
            SELECT_ROLE: [
                CallbackQueryHandler(select_role, pattern='^role_'),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            NAME_PHONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, name_phone),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            EXPERIENCE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, experience),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            SKILLS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, skills),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            ASK_PHOTO: [
                MessageHandler(filters.PHOTO, photo_handler),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            VIEW_CAT: [
                CallbackQueryHandler(handle_view_direction, pattern='^view_'),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            VIEW_NAV: [
                CallbackQueryHandler(next_resume, pattern='^next_resume$'),
                CallbackQueryHandler(prev_resume, pattern='^prev_resume$'),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            ADD_SUB: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_subscriber_save),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            REMOVE_SUB: [
                CallbackQueryHandler(remove_subscriber_confirm, pattern='^remove_'),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
            CONFIRM_REMOVE: [
                CallbackQueryHandler(confirm_remove, pattern='^confirm_remove$'),
                CallbackQueryHandler(back_main, pattern='^back_main$'),
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )

    application.add_handler(conv_handler)
    application.run_polling()


if __name__ == '__main__':
    main()
